#########################################  (1)  #########################################

cd FSE/Lecture7/Lab_7
----------------------------------------------------------------------------
vim circle.py
cat circle.py
----------------------------------------------------------------------------
#!/usr/bin/env python3

from math import pi

def compute_area(r):
    return pi * (r ** 2)

if __name__ == "__main__":
    print(compute_area(int(input())))
    
#########################################  (2)  #########################################

vim test_case.py
chmod +x test_case.py
cat test_case.py
----------------------------------------------------------------------------
#!/usr/bin/env python3

import unittest
import numpy as np

from circle import compute_area

class ComputeAreaTestCase(unittest.TestCase):
    def test_valid(self):
        valid_radius = 1.0
        output = compute_area(valid_radius)
        expected_output = np.pi
        self.assertEqual(output, expected_output, places=2)

    def test_invalid(self):
        invalid_radius = -1
        with self.assertRaises(AssertionError):
            compute_area(invalid_radius)

        invalid_radius = None
        with self.assertRaises(AssertionError):
            compute_area(invalid_radius)

        invalid_radius = "abc"
        with self.assertRaises(AssertionError):
            compute_area(invalid_radius)

    def test_boundary(self):
        radius = 0.0
        self.assertEqual(compute_area(radius),0.)


if __name__ == "__main__":
    unittest.main()
----------------------------------------------------------------------------
./test_case.py
----------------------------------------------------------------------------
.FE
======================================================================
ERROR: test_valid (__main__.ComputeAreaTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/beer/FSE/Lecture7/Lab_7/./test_case.py", line 13, in test_valid
    self.assertEqual(output, expected_output, places=2)
TypeError: TestCase.assertEqual() got an unexpected keyword argument 'places'

======================================================================
FAIL: test_invalid (__main__.ComputeAreaTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/beer/FSE/Lecture7/Lab_7/./test_case.py", line 17, in test_invalid
    with self.assertRaises(AssertionError):
AssertionError: AssertionError not raised

----------------------------------------------------------------------
Ran 3 tests in 0.000s

FAILED (failures=1, errors=1)

#########################################  (3)  #########################################

python -m unittest test -v

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK

#########################################  (4)  #########################################



----------------------------------------------------------------------------


#########################################  (5)  #########################################

vim unittest_mock.py
cat unittest_mock.py 
----------------------------------------------------------------------------
#!/usr/bin/env python3

import unittest
import numpy as np
from unittest import mock
from unittest.mock import patch
from math import pi
from circle import compute_area

class ComputeAreaTestCase(unittest.TestCase):
  
    def test_valid1(self):
        valid_result = np.pi
        valid_input = mock.Mock(return_value = valid_result)
        with mock.patch('circle.compute_area', valid_input):
            self.assertEqual(compute_area(1), valid_result)
    
    
    def test_valid2(self):
        valid_result = 4 * np.pi
        valid_input = mock.Mock(return_value = valid_result)
        with mock.patch('circle.compute_area', valid_input):
            self.assertEqual(compute_area(2), valid_result)
    
    def test_invalid1(self):
        invalid_result = 'a'
        invalid_input = mock.Mock(return_value = invalid_result)
        with mock.patch('circle.compute_area', invalid_input):
            with self.assertRaises(TypeError):
                compute_area(invalid_result)

if __name__ == '__main__':
    unittest.main()
----------------------------------------------------------------------------
chmod +x unittest_mock.py 
./unittest_mock.py 
...
----------------------------------------------------------------------
Ran 3 tests in 0.001s

OK





























